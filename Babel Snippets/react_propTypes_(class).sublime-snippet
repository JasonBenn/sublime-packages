<snippet>
    <content><![CDATA[
static propTypes = {${1:
  optionalArray: React.PropTypes.array,
  optionalBool: React.PropTypes.bool,
  optionalFunc: React.PropTypes.func,
  optionalNumber: React.PropTypes.number,
  optionalObject: React.PropTypes.object,
  optionalString: React.PropTypes.string,
  optionalNode: React.PropTypes.node,
  optionalElement: React.PropTypes.element,
  optionalKlass: React.PropTypes.instanceOf(Klass),
  optionalEnum: React.PropTypes.oneOf(['News', 'Photos']),
  optionalUnion: React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.number]),
  optionalArrayOf: React.PropTypes.arrayOf(React.PropTypes.number),
  optionalObjectOf: React.PropTypes.objectOf(React.PropTypes.number),
  optionalObjectWithShape: React.PropTypes.shape({
    color: React.PropTypes.string, 
    fontSize: React.PropTypes.number
  \}),
  requiredFunc: React.PropTypes.func.isRequired,
  requiredAny: React.PropTypes.any.isRequired,
  customProp: function(props, propName, componentName) {
    if (!/matchme/.test(props[propName])) {
      return new Error('Validation failed!');
    \}
  \}}
}
]]></content>
    <tabTrigger>pt</tabTrigger>
    <scope>source.js meta.class.js -(meta meta)</scope>
    <description>React: static propTypes() {â€¦}</description>
</snippet>
